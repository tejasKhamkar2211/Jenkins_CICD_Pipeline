pipeline {
    agent any
 
    stages {
        stage('git cloning') {
            steps {
                echo 'cloning files from github'
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/tejasKhamkar2211/docker_python_cicdpipeline.git']])
            }
        }
        stage('Build') {
            steps {
                echo 'Building nodejs project'
                sh '''
                        python3 -m venv myenv
                        source myenv/bin/activate
                        pip install -r requirements.txt
                        echo "push completed"
                        exit
                        EOF
                    '''
            }
        }
        stage('Test') {
            steps {
                echo 'Testing project'
                sh '''
                        python3 -m venv myenv
                        source myenv/bin/activate
                        pip install -r requirements.txt
                        python3 -m unittest discover -s test
                        echo "test completed"
                        exit
                        EOF
                    '''
                
            }
        }
        stage('Container Build') {
            steps {
                echo 'containr building'
                sh "docker build -t pythonapk ."
                
            }
            
        }
        stage('Container Test') {
            steps {
                echo 'Testing python container'
            sh '''
            # Stop and remove any existing container
            docker stop pythonlive || true
            docker rm pythonlive || true

            echo 'Running the container'
            # Run the container
            docker run -d -p 80:5000 --name pythonlive pythonapk:latest

            echo "Monitoring 'pythonlive' for 30 seconds..."
            for i in {1..30}; do
                if docker ps --filter "name=pythonlive" --filter "status=running" | grep pythonlive > /dev/null; then
                    echo "[$i sec] Container is running"
                else
                    echo "[$i sec] Container is NOT running!"
                    exit 1  # Fail the build if the container stops
                fi
                sleep 1
            done
            echo "Monitoring complete!"
            '''
                
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying nodejs project on live server'
                sh '''
                        docker login -u --------- -p -----------
                        docker build -t pythonapk .
                        docker tag pythonapk:latest omkarkhamkar/docker_python_cicdpipeline
                        docker images
                        docker push omkarkhamkar/docker_python_cicdpipeline
                        echo "Deployment Completed!"
                        exit
                        EOF
                    '''
                    sshagent(['02312f7c-0000-4791-8b39-57682f49eaf6']) {
                    // some block
                    sh '''
                        ssh -o StrictHostKeyChecking=no ec2-user@54.242.89.202 << EOF
                        echo "Connected to Server"
                        sudo docker pull omkarkhamkar/docker_python_cicdpipeline:latest
                        sudo docker stop pythonlive || true
                        sudo docker rm pythonlive || true
                        docker run -d -p 80:5000 --name pythonlive omkarkhamkar/docker_python_cicdpipeline
                        exit
                        EOF
                    '''
                    }
                
            }
        }
    }
}
